{"version":3,"sources":["core/types/Card.ts","styles/theme.ts","core/utils/constants.ts","core/store/context.ts","core/store/reducer.ts","core/utils/value.ts","core/store/Store.tsx","styles/device.ts","styles/GlobalStyle.ts","components/Cards.tsx","components/Score.tsx","components/Hand.tsx","core/services/api.ts","components/Button.tsx","components/MainActions.tsx","App.tsx","core/hooks/useDeviceDetect.tsx","reportWebVitals.ts","index.tsx"],"names":["Value","theme","colors","black","white","greyDark","pink","purple","purpleDark","green","red","GameState","SCORE_LIMIT","FACE_CARDS","KING","QUEEN","JACK","ACE_CARD","ACE","DeviceSize","gameStateText","GAME_OVER","WIN","IN_PROGRESS","PLAYER_STOOD","gameStateColor","Actions","initialState","deckId","undefined","player","cards","score","bank","playerStood","gameState","context","createContext","Provider","Consumer","getScore","values","aceNumber","filter","value","length","reduce","acc","includes","getValue","getAceValue","reducer","state","action","type","NEW_GAME","payload","PLAYER_HIT","newPlayerCards","concat","newPlayerScore","map","card","BANK_HIT","newBankCards","newBankScore","PLAYER_STAND","UPDATE_GAME","Store","children","useReducer","dispatch","device","mobileS","MOBILE_S","mobileM","MOBILE_M","mobileL","MOBILE_L","tablet","TABLET","laptop","LAPTOP","laptopL","LAPTOP_L","desktop","DESKTOP","desktopL","GlobalStyle","createGlobalStyle","imagePerLine","Wrapper","styled","figure","Image","img","number","Cards","index","src","image","alt","suit","div","Score","article","Title","h2","Hand","React","forwardRef","ref","title","game","a","axios","get","response","data","getNewCard","defaults","baseURL","Button","button","disabled","MainActions","useContext","useMemo","interval","useRef","startNewGame","current","stopBankHitting","getNewDeck","then","deck_id","clearInterval","useEffect","setInterval","catch","err","onClick","Container","section","GameInfo","backgroundColor","h1","App","bankHandComponent","isMobile","useState","window","innerWidth","width","setWidth","handleResize","addEventListener","removeEventListener","useDeviceDetect","newState","playerScore","bankScore","evaluateScoreResults","scrollIntoView","behavior","block","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c10268d0.chunk.js","sourcesContent":["export enum Value {\n  ACE = 'ACE',\n  KING = 'KING',\n  QUEEN = 'QUEEN',\n  JACK = 'JACK',\n  ONE = '1',\n  TWO = '2',\n  THREE = '3',\n  FOUR = '4',\n  FIVE = '5',\n  SIX = '6',\n  SEVEN = '7',\n  EIGHT = '8',\n  NINE = '9',\n  TEN = '10',\n}\n\nexport default interface Card {\n  image: string;\n  value: Value;\n  suit: string;\n  code: string;\n}\n","export type ThemeType = typeof theme;\n\nconst theme = {\n  colors: {\n    black: '#050505',\n    white: '#ffffff',\n    greyDark: '#191919',\n    pink: '#f093b0',\n    purple: '#4f41ab',\n    purpleDark: '#3725ae',\n    green: '#41a447',\n    red: '#a44141',\n  },\n};\n\nexport default theme;\n","import theme from '../../styles/theme';\nimport { Value } from '../types/Card';\n\nexport const SCORE_LIMIT = 21;\n\nexport const FACE_CARDS = [Value.KING, Value.QUEEN, Value.JACK];\nexport const FACE_CARDS_VALUE = 10;\n\nexport const OTHER_CARDS_VALUE = 1;\n\nexport const ACE_CARD = Value.ACE;\nexport const ACE_VALUE_UNDER_21 = 11;\nexport const ACE_VALUE_OVER_21 = 1;\n\nexport enum GameState {\n  GAME_OVER = 'GAME_OVER',\n  WIN = 'WIN',\n  IN_PROGRESS = 'IN_PROGRESS',\n  PLAYER_STOOD = 'PLAYER_STOOD',\n}\n\nexport const gameStateText = {\n  [GameState.GAME_OVER]: 'Game Over',\n  [GameState.WIN]: 'You win',\n  [GameState.IN_PROGRESS]: `It's your turn`,\n  [GameState.PLAYER_STOOD]: 'Bank is playing',\n};\n\nexport const gameStateColor = {\n  [GameState.GAME_OVER]: theme.colors.red,\n  [GameState.WIN]: theme.colors.green,\n  [GameState.IN_PROGRESS]: theme.colors.purple,\n  [GameState.PLAYER_STOOD]: theme.colors.greyDark,\n};\n\nexport enum DeviceSize {\n  MOBILE_S = 320,\n  MOBILE_M = 375,\n  MOBILE_L = 425,\n  TABLET = 768,\n  LAPTOP = 1024,\n  LAPTOP_L = 1440,\n  DESKTOP = 2560,\n}\n","import { createContext, Dispatch } from 'react';\nimport Card from '../types/Card';\nimport { GameState } from '../utils/constants';\nimport { Action } from './reducer';\n\ninterface Player {\n  cards: Card[];\n  score: number;\n}\nexport interface State {\n  deckId?: string;\n  player: Player;\n  bank: Player;\n  playerStood: boolean;\n  gameState: GameState;\n}\n\nexport type Context = [State, Dispatch<Action>];\n\nexport const initialState: State = {\n  deckId: undefined,\n  player: {\n    cards: [],\n    score: 0,\n  },\n  bank: {\n    cards: [],\n    score: 0,\n  },\n  playerStood: false,\n  gameState: GameState.IN_PROGRESS,\n};\n\n// @ts-ignore\nconst context = createContext<Context>([]);\nconst { Provider, Consumer } = context;\n\nexport { Provider, Consumer };\nexport default context;\n","import { initialState, State } from './context';\nimport Card from '../types/Card';\nimport { getScore } from '../utils/value';\nimport { GameState } from '../utils/constants';\n\nexport enum Actions {\n  NEW_GAME = 'NEW_GAME',\n  PLAYER_HIT = 'PLAYER_HIT',\n  PLAYER_STAND = 'PLAYER_STAND',\n  BANK_HIT = 'BANK_HIT',\n  UPDATE_GAME = 'UPDATE_GAME',\n}\n\nexport type Action =\n  | { type: Actions.NEW_GAME; payload: string }\n  | { type: Actions.PLAYER_HIT; payload: Card }\n  | { type: Actions.PLAYER_STAND }\n  | { type: Actions.BANK_HIT; payload: Card }\n  | { type: Actions.UPDATE_GAME; payload: GameState };\n\nexport default function reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case Actions.NEW_GAME:\n      return {\n        ...initialState,\n        deckId: action.payload,\n      };\n    case Actions.PLAYER_HIT:\n      const newPlayerCards = state.player.cards.concat(action.payload);\n      const newPlayerScore = getScore(newPlayerCards.map((card) => card.value));\n\n      return {\n        ...state,\n        player: {\n          ...state.player,\n          cards: newPlayerCards,\n          score: newPlayerScore,\n        },\n      };\n    case Actions.BANK_HIT:\n      const newBankCards = state.bank.cards.concat(action.payload);\n      const newBankScore = getScore(newBankCards.map((card) => card.value));\n\n      return {\n        ...state,\n        bank: {\n          ...state.bank,\n          cards: newBankCards,\n          score: newBankScore,\n        },\n      };\n    case Actions.PLAYER_STAND:\n      return {\n        ...state,\n        playerStood: true,\n      };\n    case Actions.UPDATE_GAME:\n      return {\n        ...state,\n        gameState: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import { Value } from '../types/Card';\nimport {\n  ACE_CARD,\n  ACE_VALUE_OVER_21,\n  ACE_VALUE_UNDER_21,\n  FACE_CARDS,\n  FACE_CARDS_VALUE,\n  GameState,\n  OTHER_CARDS_VALUE,\n  SCORE_LIMIT,\n} from './constants';\n\nfunction getValue(value: Value) {\n  const hasFaceCard = FACE_CARDS.includes(value);\n\n  return hasFaceCard ? FACE_CARDS_VALUE : OTHER_CARDS_VALUE;\n}\n\nfunction getAceValue(aceNumber: number, score: number) {\n  if (aceNumber > 1 || score + ACE_VALUE_UNDER_21 > SCORE_LIMIT) {\n    return ACE_VALUE_OVER_21 * aceNumber;\n  } else {\n    return ACE_VALUE_UNDER_21;\n  }\n}\n\nexport function getScore(values: Value[]) {\n  const aceNumber = values.filter((value) => value === ACE_CARD).length;\n\n  const score = values\n    .filter((value) => value !== ACE_CARD)\n    .reduce((acc, value) => acc + getValue(value), 0);\n\n  const aceValue = aceNumber ? getAceValue(aceNumber, score) : 0;\n\n  return score + aceValue;\n}\n\nexport function evaluateScoreResults(\n  playerScore: number,\n  bankScore: number,\n  playerStood: boolean\n): GameState {\n  if (playerScore <= SCORE_LIMIT && playerStood && bankScore > SCORE_LIMIT) {\n    return GameState.WIN;\n  } else if (playerScore > SCORE_LIMIT || bankScore === SCORE_LIMIT) {\n    return GameState.GAME_OVER;\n  } else if (playerStood) {\n    return GameState.PLAYER_STOOD;\n  }\n\n  return GameState.IN_PROGRESS;\n}\n","import { Reducer, useReducer } from 'react';\nimport reducer, { Action } from './reducer';\nimport { Provider, State, initialState } from './context';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport default function Store({ children }: Props) {\n  const [state, dispatch] = useReducer<Reducer<State, Action>>(reducer, initialState);\n\n  return <Provider value={[state, dispatch]}>{children}</Provider>;\n}\n","import { DeviceSize } from '../core/utils/constants';\n\nconst device = {\n  mobileS: `(min-width: ${DeviceSize.MOBILE_S}px)`,\n  mobileM: `(min-width: ${DeviceSize.MOBILE_M}px)`,\n  mobileL: `(min-width: ${DeviceSize.MOBILE_L}px)`,\n  tablet: `(min-width: ${DeviceSize.TABLET}px)`,\n  laptop: `(min-width: ${DeviceSize.LAPTOP}px)`,\n  laptopL: `(min-width: ${DeviceSize.LAPTOP_L}px)`,\n  desktop: `(min-width: ${DeviceSize.DESKTOP}px)`,\n  desktopL: `(min-width: ${DeviceSize.DESKTOP}px)`,\n};\n\nexport default device;\n","import { createGlobalStyle } from 'styled-components';\nimport { ThemeType } from './theme';\n\nconst GlobalStyle = createGlobalStyle<{ theme: ThemeType }>`\n*, \n*:before, \n*:after {\n  box-sizing: border-box;\n}\n\nbody {\n  background: ${({ theme }) => theme.colors.black};\n  color: ${({ theme }) => theme.colors.white}\n}\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Card from '../core/types/Card';\nimport device from '../styles/device';\n\ninterface Props {\n  cards: Card[];\n}\n\ntype ImageProps = {\n  number: number;\n};\n\nconst imagePerLine = {\n  mobile: 5,\n  desktop: 9,\n};\n\nconst Wrapper = styled.figure`\n  position: relative;\n  height: 200px;\n  width: 100%;\n`;\n\nconst Image = styled.img<ImageProps>`\n  position: absolute;\n  top: ${({ number }) => (number > imagePerLine.mobile ? '40px;' : '0px')};\n  left: ${({ number }) =>\n    number > imagePerLine.mobile\n      ? (number - imagePerLine.mobile - 1) * 30\n      : number * 30}px;\n  height: 100px;\n  box-shadow: 1px 0 8px ${({ theme }) => theme.colors.black};\n\n  @media ${device.mobileL} {\n    top: ${({ number }) => (number > imagePerLine.desktop ? '40px;' : '0px')};\n    left: ${({ number }) =>\n      number > imagePerLine.desktop\n        ? (number - imagePerLine.desktop - 1) * 30\n        : number * 30}px;\n  }\n`;\n\nexport default function Cards({ cards }: Props) {\n  return (\n    <Wrapper>\n      {cards.map((card, index) => (\n        <Image\n          key={`${card.value}_${card.suit}_${index}`}\n          src={card.image}\n          alt={`${card.value}_${card.suit}`}\n          number={index}\n        />\n      ))}\n    </Wrapper>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface Props {\n  score: number;\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 20px;\n  width: 40px;\n  height: 40px;\n  background-color: ${({ theme }) => theme.colors.pink};\n  color: ${({ theme }) => theme.colors.greyDark};\n  border-radius: 50%;\n`;\n\nexport default function Score({ score }: Props) {\n  return <Wrapper>{score}</Wrapper>;\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Card from '../core/types/Card';\nimport device from '../styles/device';\n\nimport Cards from './Cards';\nimport Score from './Score';\n\ninterface Props {\n  title: string;\n  game: {\n    cards: Card[];\n    score: number;\n  };\n}\n\nconst Wrapper = styled.article`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  background-color: ${({ theme }) => theme.colors.greyDark};\n  width: 100%;\n  height: 400px;\n  border-radius: 5px;\n  padding: 20px;\n\n  @media ${device.tablet} {\n    width: 400px;\n  }\n`;\n\nconst Title = styled.h2``;\n\nconst Hand = React.forwardRef<HTMLDivElement, Props>(({ title, game }, ref) => (\n  <Wrapper ref={ref}>\n    <Title>{title}</Title>\n    <Cards cards={game.cards} />\n    <Score score={game.score} />\n  </Wrapper>\n));\n\nexport default Hand;\n","import axios, { AxiosResponse } from 'axios';\nimport Deck from '../types/Deck';\nimport Card from '../types/Card';\n\n// setup the base API URL\naxios.defaults.baseURL = 'https://deckofcardsapi.com/api/';\n\nexport async function getNewDeck(): Promise<Deck> {\n  const response: AxiosResponse<Deck> = await axios.get(\n    'deck/new/shuffle/?deck_count=6'\n  );\n\n  return response.data;\n}\n\nexport async function getNewCard(deckId: string): Promise<Card> {\n  const response: AxiosResponse<{ cards: Card[] }> = await axios.get(\n    `deck/${deckId}/draw/?count=1`\n  );\n\n  return response.data.cards[0];\n}\n","import styled from 'styled-components';\n\nconst Button = styled.button`\n  font-family: 'Poppins';\n  border: 0;\n  padding: 10px 40px;\n  font-size: 1rem;\n  text-transform: uppercase;\n  border-radius: 30px;\n  background-color: ${({ theme, disabled }) =>\n    !disabled ? theme.colors.purple : theme.colors.greyDark};\n  color: ${({ theme }) => theme.colors.white};\n  ${({ disabled }) => !disabled && 'cursor: pointer;'}\n  transition: background-color 0.3s ease;\n  box-shadow: 1px 1px 1px;\n\n  &:hover {\n    background-color: ${({ theme, disabled }) =>\n      !disabled ? theme.colors.purpleDark : theme.colors.greyDark};\n  }\n`;\n\nexport default Button;\n","import React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport styled from 'styled-components';\n\nimport { getNewCard, getNewDeck } from '../core/services/api';\nimport context from '../core/store/context';\nimport { Actions } from '../core/store/reducer';\nimport { GameState, SCORE_LIMIT } from '../core/utils/constants';\nimport device from '../styles/device';\n\nimport Button from './Button';\n\nconst Wrapper = styled.div`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  justify-content: center;\n  flex-direction: column-reverse;\n  margin: 30px;\n\n  > div:last-child > button:first-child {\n    margin-right: 10px;\n  }\n\n  > div:first-child {\n    margin-top: 20px;\n  }\n\n  @media ${device.tablet} {\n    flex-direction: row;\n\n    > div:first-child {\n      margin-top: 0;\n      margin-right: 50px;\n    }\n  }\n`;\n\nexport default function MainActions() {\n  const [state, dispatch] = useContext(context);\n\n  const { deckId, bank, playerStood, gameState } = state;\n\n  const disabled = useMemo(\n    () =>\n      !deckId ||\n      playerStood ||\n      gameState === GameState.GAME_OVER ||\n      gameState === GameState.WIN,\n    [playerStood, gameState, deckId]\n  );\n\n  const interval = useRef<null | number>(null);\n\n  const startNewGame = () => {\n    if (interval.current) {\n      stopBankHitting();\n    }\n\n    getNewDeck().then((data) => {\n      dispatch({ type: Actions.NEW_GAME, payload: data.deck_id });\n    });\n  };\n\n  const playerHitting = () => {\n    getNewCard(deckId!)\n      .then((data) => dispatch({ type: Actions.PLAYER_HIT, payload: data }))\n      .catch((err) => err);\n  };\n\n  const playerStanding = () => {\n    dispatch({ type: Actions.PLAYER_STAND });\n  };\n\n  const stopBankHitting = () => {\n    clearInterval(interval.current!);\n    interval.current = null;\n  };\n\n  useEffect(() => {\n    if (!deckId) {\n      startNewGame();\n    }\n  });\n\n  useEffect(() => {\n    if (playerStood && !interval.current) {\n      interval.current = setInterval(() => {\n        getNewCard(deckId!)\n          .then((data) => dispatch({ type: Actions.BANK_HIT, payload: data }))\n          .catch((err) => err);\n      }, 2000);\n    } else if (bank.score >= SCORE_LIMIT) {\n      stopBankHitting();\n    }\n  }, [playerStood, bank.score, deckId, dispatch]);\n\n  return (\n    <Wrapper>\n      <div>\n        <Button onClick={startNewGame}>Start new game</Button>\n      </div>\n      <div>\n        <Button disabled={disabled} onClick={playerHitting}>\n          Hit\n        </Button>\n        <Button disabled={disabled} onClick={playerStanding}>\n          Stand\n        </Button>\n      </div>\n    </Wrapper>\n  );\n}\n","import React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\n\nimport theme from './styles/theme';\nimport device from './styles/device';\nimport GlobalStyle from './styles/GlobalStyle';\n\nimport context from './core/store/context';\nimport { Actions } from './core/store/reducer';\nimport { gameStateColor, gameStateText } from './core/utils/constants';\nimport { evaluateScoreResults } from './core/utils/value';\nimport useDeviceDetect from './core/hooks/useDeviceDetect';\n\nimport Hand from './components/Hand';\nimport MainActions from './components/MainActions';\n\nconst Container = styled.div`\n  text-align: center;\n  padding-bottom: 200px;\n\n  @media ${device.tablet} {\n    padding-bottom: 100px;\n  }\n`;\n\nconst Wrapper = styled.section`\n  display: flex;\n  flex-direction: column;\n  margin: 0 20px;\n\n  > *:first-child {\n    margin-bottom: 20px;\n  }\n\n  @media ${device.tablet} {\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n\n    > *:first-child {\n      margin-bottom: 0;\n      margin-right: 20px;\n    }\n  }\n`;\n\nconst GameInfo = styled.h2<{ backgroundColor: string }>`\n  position: sticky;\n  padding: 10px;\n  margin: 0 0 40px;\n  background-color: ${({ backgroundColor }) => backgroundColor};\n  transition: background-color 0.5s ease;\n  top: 0;\n  z-index: 2;\n\n  @media ${device.tablet} {\n    position: relative;\n  }\n`;\n\nconst Title = styled.h1`\n  font-family: 'Poppins';\n  font-size: 3rem;\n`;\n\nfunction App() {\n  const [state, dispatch] = useContext(context);\n  const { player, bank, playerStood, gameState } = state;\n  const bankHandComponent = useRef<HTMLDivElement>(null);\n  const isMobile = useDeviceDetect();\n\n  const newState = useMemo(\n    () => evaluateScoreResults(player.score, bank.score, playerStood),\n    [player.score, bank.score, playerStood]\n  );\n\n  useEffect(() => {\n    if (newState !== gameState) {\n      dispatch({ type: Actions.UPDATE_GAME, payload: newState });\n    }\n  }, [gameState, newState, dispatch]);\n\n  useEffect(() => {\n    if (bankHandComponent.current && isMobile && playerStood) {\n      // Get mobile user to the bank's hand without action from him\n      bankHandComponent.current?.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start',\n      });\n    }\n  }, [isMobile, playerStood]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container>\n        <GameInfo backgroundColor={gameStateColor[gameState]}>\n          {gameStateText[gameState]}\n        </GameInfo>\n        <header>\n          <Title>BlackJack</Title>\n        </header>\n        <Wrapper>\n          <Hand title=\"Your hand\" game={player} />\n          <Hand ref={bankHandComponent} title=\"Bank's hand\" game={bank} />\n        </Wrapper>\n        <footer>\n          <MainActions />\n        </footer>\n      </Container>\n      <GlobalStyle />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\nimport { DeviceSize } from '../utils/constants';\n\nexport default function useWindowWidth() {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  });\n\n  return width < DeviceSize.TABLET;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Store from './core/store/Store';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Store>\n      <App />\n    </Store>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}